import pygame

pygame.init()

# 화면 설정
screen = pygame.display.set_mode((800, 600))
pygame.display.set_caption("TinoVenture")

# 배경 및 이미지 불러오기
background_image = pygame.image.load('map.png').convert()
background_image = pygame.transform.scale(background_image, (800, 600))

lobby_background_image = pygame.image.load('loby.png').convert()
lobby_background_image = pygame.transform.scale(lobby_background_image, (800, 600))

tino_image = pygame.image.load('mario.png').convert()
tino_image.set_colorkey((0, 0, 0))
tino_image = pygame.transform.scale(tino_image, (50, 50))

stand_image = pygame.image.load('stand.png').convert()
stand_image.set_colorkey((0, 0, 0))
stand_image = pygame.transform.scale(stand_image, (50, 50))

tinoface_image = pygame.image.load('tinoface.png').convert()
tinoface_image.set_colorkey((0, 0, 0))
tinoface_image = pygame.transform.scale(tinoface_image, (30, 30))

finish_image = pygame.image.load('finish.png').convert()
finish_image.set_colorkey((0, 0, 0))
finish_image = pygame.transform.scale(finish_image, (150, 150))

tino_image_flipped = pygame.transform.flip(tino_image, True, False)
stand_image_flipped = pygame.transform.flip(stand_image, True, False)

ground_image = pygame.image.load('ground.png').convert_alpha()
ground_width, ground_height = ground_image.get_size()

# 지면 설정
ground_y_position = 500

# ground_blocks 정의
ground_blocks = [
    pygame.Rect(x, ground_y_position, ground_width, ground_height)
    for x in range(0, 800, ground_width) if not (500 <= x < 700)
]

# scene_2_ground_blocks 정의
scene_2_ground_blocks = [
    pygame.Rect(x, ground_y_position, ground_width, ground_height)
    for x in range(0, 800, ground_width) if not (400 <= x < 600)
]

# scene_3_ground_blocks 정의
scene_3_ground_blocks = [
    pygame.Rect(x, ground_y_position, ground_width, ground_height)
    for x in range(0, 800, ground_width)
]

block1_rect = pygame.Rect(200, ground_y_position - ground_height - 70, ground_width, ground_height)
block2_rect = pygame.Rect(500, ground_y_position - ground_height - 70, ground_width, ground_height)

scene_2_block1_rect = pygame.Rect(300, ground_y_position - ground_height - 70, ground_width, ground_height)
scene_2_block2_rect = pygame.Rect(600, ground_y_position - ground_height - 70, ground_width, ground_height)

# finish 위치 설정
finish_rect = pygame.Rect(600, ground_y_position - 150, 50, 50)

# 게임 상태 변수
scene = "main_menu"
running = True
tino_x, tino_y = 50, ground_y_position - 50
tino_velocity_y = 0
gravity = 0.001
jump_strength = -0.5
on_ground = True
move_speed = 0.1
facing_left = False
moving = False

triangle_falling = False
triangle_x = 0
triangle_y = -50
triangle_speed = 0.3

player_lives = 3
font = pygame.font.SysFont("Arial", 24)

# 게임 리셋 함수
def reset_game():
    global tino_x, tino_y, tino_velocity_y, triangle_falling, triangle_x, triangle_y, player_lives, scene
    tino_x, tino_y = 50, ground_y_position - 50  
    tino_velocity_y = 0
    triangle_falling = False
    triangle_x = 0
    triangle_y = -50
    player_lives -= 1
    scene = "main_game"

# 구멍 처리 함수
def check_falling_into_hole():
    global player_lives
    tino_rect = pygame.Rect(tino_x, tino_y, 50, 50)
    is_in_hole = True

    if scene == "main_game":
        for block in ground_blocks:
            if tino_rect.colliderect(block):
                is_in_hole = False
                break
        if tino_rect.colliderect(block1_rect) or tino_rect.colliderect(block2_rect):
            is_in_hole = False
    elif scene == "scene_2":
        for block in scene_2_ground_blocks:
            if tino_rect.colliderect(block):
                is_in_hole = False
                break
        if tino_rect.colliderect(scene_2_block1_rect) or tino_rect.colliderect(scene_2_block2_rect):
            is_in_hole = False
    elif scene == "scene_3":
        for block in scene_3_ground_blocks:
            if tino_rect.colliderect(block):
                is_in_hole = False
                break

    if is_in_hole and tino_y > ground_y_position:
        reset_game()

# 로비 그리기
def draw_lobby():
    screen.blit(lobby_background_image, (0, 0))

def draw_message_box(message):
    box_width, box_height = 400, 200
    box_x = (800 - box_width) // 2
    box_y = (600 - box_height) // 2

    # 박스 그리기
    pygame.draw.rect(screen, (255, 255, 255), (box_x, box_y, box_width, box_height)) 
    pygame.draw.rect(screen, (0, 0, 0), (box_x, box_y, box_width, box_height), 3)  

    # 메시지 텍스트 렌더링
    message_lines = message.split('\n')
    font = pygame.font.SysFont("Arial", 24)
    for i, line in enumerate(message_lines):
        text_surface = font.render(line, True, (0, 0, 0))  
        text_x = box_x + (box_width - text_surface.get_width()) // 2
        text_y = box_y + 40 + i * 30
        screen.blit(text_surface, (text_x, text_y))

    # "Enter 키로 계속" 안내 메시지
    continue_text = font.render("Press Enter to continue", True, (0, 0, 0))
    continue_x = box_x + (box_width - continue_text.get_width()) // 2
    continue_y = box_y + box_height - 40
    screen.blit(continue_text, (continue_x, continue_y))

def check_finish():
    global scene, message_active, tino_health
    if scene == "scene_3":
        tino_rect = pygame.Rect(tino_x, tino_y, 50, 50)
        if tino_rect.colliderect(finish_rect):
            message_active = True

# 게임 씬 그리기
def draw_game_scene():
    screen.blit(background_image, (0, 0))
    if moving:
        current_tino_image = tino_image if facing_left else tino_image_flipped
    else:
        current_tino_image = stand_image if facing_left else stand_image_flipped
    screen.blit(current_tino_image, (tino_x, tino_y))

    if scene == "main_game":
        for block in ground_blocks:
            screen.blit(ground_image, block.topleft)
        screen.blit(ground_image, block1_rect.topleft)
        screen.blit(ground_image, block2_rect.topleft)
    elif scene == "scene_2":
        for block in scene_2_ground_blocks:
            screen.blit(ground_image, block.topleft)
        screen.blit(ground_image, scene_2_block1_rect.topleft)
        screen.blit(ground_image, scene_2_block2_rect.topleft)
    elif scene == "scene_3":
        for block in scene_3_ground_blocks:
            screen.blit(ground_image, block.topleft)
        screen.blit(finish_image, finish_rect.topleft)

    if triangle_falling:
        triangle_points = [
            (triangle_x, triangle_y + 50),
            (triangle_x - 20, triangle_y),
            (triangle_x + 20, triangle_y)
        ]
        pygame.draw.polygon(screen, (255, 0, 0), triangle_points)

    screen.blit(tinoface_image, (10, 10))
    lives_text = font.render(f"x {player_lives}", True, (0, 0, 0))
    screen.blit(lives_text, (50, 10))

    # 메시지 박스 활성화 시 그리기
    if message_active:
        draw_message_box(f"Wow, I arrived safely!\nBut is this the only life I have left?\n{player_lives}?!")

# 메시지 박스 상태 변수
message_active = False

# 키 처리
def handle_keys():
    global tino_x, tino_y, tino_velocity_y, on_ground, facing_left, moving
    keys = pygame.key.get_pressed()
    moving = False
    if keys[pygame.K_a]:
        tino_x -= move_speed
        facing_left = True
        moving = True
    if keys[pygame.K_d]:
        tino_x += move_speed
        facing_left = False
        moving = True
    if keys[pygame.K_w] and on_ground:
        tino_velocity_y = jump_strength
        on_ground = False
        moving = True

# 충돌 처리
def handle_collisions():
    global tino_y, tino_velocity_y, on_ground, scene, tino_x
    tino_rect = pygame.Rect(tino_x, tino_y, 50, 50)

    if scene == "main_game":
        blocks = ground_blocks + [block1_rect, block2_rect]
    elif scene == "scene_2":
        blocks = scene_2_ground_blocks + [scene_2_block1_rect, scene_2_block2_rect]
    elif scene == "scene_3":
        blocks = scene_3_ground_blocks

    for block in blocks:
        if tino_rect.colliderect(block) and tino_velocity_y > 0:
            tino_y = block.top - 50
            tino_velocity_y = 0
            on_ground = True
            return

    if tino_x > 800:
        if scene == "main_game":
            scene = "scene_2"
        elif scene == "scene_2":
            scene = "scene_3"
        tino_x = 0

# 삼각형 처리
def handle_triangle():
    global triangle_falling, triangle_y, triangle_x
    tino_rect = pygame.Rect(tino_x, tino_y, 50, 50)
    if triangle_falling:
        triangle_y += triangle_speed
        triangle_rect = pygame.Rect(triangle_x - 20, triangle_y, 40, 50)
        if triangle_rect.colliderect(tino_rect):
            reset_game()
    elif tino_x >= 300 and not triangle_falling:
        triangle_falling = True
        triangle_x = tino_x + 140

# 메인 루프
while running:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
        elif scene == "main_menu" and event.type == pygame.KEYDOWN and event.key == pygame.K_RETURN:
            scene = "main_game"
        elif message_active and event.type == pygame.KEYDOWN and event.key == pygame.K_RETURN:
            message_active = False 

    if scene == "main_menu":
        draw_lobby()
    elif scene in ["main_game", "scene_2", "scene_3"]:
        if not message_active:  
            handle_keys()
            tino_velocity_y += gravity
            tino_y += tino_velocity_y
            handle_collisions()
            check_falling_into_hole()
            handle_triangle()
            check_finish()
        draw_game_scene()

    pygame.display.flip()

pygame.quit()
