import pygame
import random

pygame.init()

screen = pygame.display.set_mode((800, 600))
pygame.display.set_caption("TinoVenture")

background_image = pygame.image.load('map.png').convert()
background_image = pygame.transform.scale(background_image, (800, 600))

lobby_background_image = pygame.image.load('loby.png').convert()
lobby_background_image = pygame.transform.scale(lobby_background_image, (800, 600))

tino_image = pygame.image.load('mario.png').convert()
tino_image.set_colorkey((0, 0, 0))
tino_image = pygame.transform.scale(tino_image, (50, 50))

stand_image = pygame.image.load('stand.png').convert()
stand_image.set_colorkey((0, 0, 0)) 
stand_image = pygame.transform.scale(stand_image, (50, 50))

tinoface_image = pygame.image.load('tinoface.png').convert()
tinoface_image.set_colorkey((0, 0, 0))  
tinoface_image = pygame.transform.scale(tinoface_image, (30, 30))

tino_image_flipped = pygame.transform.flip(tino_image, True, False)
stand_image_flipped = pygame.transform.flip(stand_image, True, False)

ground_image = pygame.image.load('ground.png').convert_alpha()
ground_width, ground_height = ground_image.get_size()

ground_y_position = 500

ground_blocks = [
    pygame.Rect(x, ground_y_position, ground_width, ground_height)
    for x in range(0, 800, ground_width) if not (500 <= x < 600)
]

block1_rect = pygame.Rect(200, ground_y_position - ground_height - 70, ground_width, ground_height)
block2_rect = pygame.Rect(500, ground_y_position - ground_height - 70, ground_width, ground_height)

scene = "main_menu"
running = True
tino_x, tino_y = 50, ground_y_position - 50
tino_velocity_y = 0
gravity = 0.001
jump_strength = -0.5
on_ground = True
move_speed = 0.1
facing_right = False
moving = False

triangle_falling = False
triangle_x = 0
triangle_y = -50
triangle_speed = 0.3

player_lives = 3
font = pygame.font.SysFont("Arial", 24)

scene_2_block1_rect = pygame.Rect(300, ground_y_position - ground_height - 70, ground_width, ground_height)
scene_2_block2_rect = pygame.Rect(600, ground_y_position - ground_height - 70, ground_width, ground_height)

def reset_game():
    global tino_x, tino_y, tino_velocity_y, triangle_falling, triangle_x, triangle_y, player_lives
    tino_x, tino_y = 50, ground_y_position - 50
    tino_velocity_y = 0
    triangle_falling = False
    triangle_x = 0
    triangle_y = -50
    player_lives -= 1

def draw_lobby():
    screen.blit(lobby_background_image, (0, 0))

def draw_game_scene():
    screen.blit(background_image, (0, 0)) 
    if moving:
        current_tino_image = tino_image if facing_right else tino_image_flipped
    else:
        current_tino_image = stand_image if facing_right else stand_image_flipped
    screen.blit(current_tino_image, (tino_x, tino_y))

    for block in ground_blocks:
        screen.blit(ground_image, block.topleft)
    
    if scene == "main_game":
        screen.blit(ground_image, block1_rect.topleft)
        screen.blit(ground_image, block2_rect.topleft)  # block2 복원
    elif scene == "scene_2":
        screen.blit(ground_image, scene_2_block1_rect.topleft)
        screen.blit(ground_image, scene_2_block2_rect.topleft)

    if triangle_falling:
        pygame.draw.polygon(screen, (255, 0, 0), [(triangle_x, triangle_y),
                                                  (triangle_x + 30, triangle_y + 50),
                                                  (triangle_x - 30, triangle_y + 50)])

    screen.blit(tinoface_image, (10, 10))
    lives_text = font.render(f"x {player_lives}", True, (0, 0, 0))
    screen.blit(lives_text, (50, 10))

def handle_keys():
    global tino_x, tino_y, tino_velocity_y, on_ground, facing_right, moving
    keys = pygame.key.get_pressed()
    moving = False
    if keys[pygame.K_a]:
        tino_x -= move_speed
        facing_right = True
        moving = True
    if keys[pygame.K_d]:
        tino_x += move_speed
        facing_right = False
        moving = True
    if keys[pygame.K_w] and on_ground:
        tino_velocity_y = jump_strength
        on_ground = False
        moving = True

def handle_collisions():
    global tino_y, tino_velocity_y, on_ground, scene, tino_x
    tino_rect = pygame.Rect(tino_x, tino_y, 50, 50)

    blocks = ground_blocks
    block_check = block1_rect if scene == "main_game" else scene_2_block1_rect
    block2_check = block2_rect if scene == "main_game" else scene_2_block2_rect

    for block in blocks:
        if tino_rect.colliderect(block) and tino_velocity_y > 0:
            tino_y = block.top - 50
            tino_velocity_y = 0
            on_ground = True
            return
    if tino_rect.colliderect(block_check) and tino_velocity_y > 0:
        tino_y = block_check.top - 50
        tino_velocity_y = 0
        on_ground = True
    elif tino_rect.colliderect(block2_check) and tino_velocity_y > 0:
        tino_y = block2_check.top - 50
        tino_velocity_y = 0
        on_ground = True
    elif scene == "main_game" and 500 <= tino_x < 600:
        on_ground = False
    elif tino_y >= ground_y_position - 50:
        tino_y = ground_y_position - 50
        tino_velocity_y = 0
        on_ground = True
    else:
        on_ground = False

    if tino_x > 800:
        if scene == "main_game":
            scene = "scene_2"
        tino_x = 0

def handle_triangle():
    global triangle_falling, triangle_y, triangle_x
    tino_rect = pygame.Rect(tino_x, tino_y, 50, 50)
    if triangle_falling:
        triangle_y += triangle_speed
        triangle_rect = pygame.Rect(triangle_x - 30, triangle_y, 60, 50)
        if triangle_rect.colliderect(tino_rect):
            reset_game()
    elif tino_x >= 300 and not triangle_falling:
        triangle_falling = True
        triangle_x = tino_x + 140

while running:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
        elif scene == "main_menu" and event.type == pygame.KEYDOWN and event.key == pygame.K_RETURN:
            scene = "main_game"

    if scene == "main_menu":
        draw_lobby()
    elif scene in ["main_game", "scene_2"]:
        handle_keys()
        tino_velocity_y += gravity
        tino_y += tino_velocity_y
        handle_collisions()
        handle_triangle()
        draw_game_scene()

    pygame.display.flip()

pygame.quit()
